@page "/"
@using MudBlazor
@using BlazorSurvey.Client
@using BlazorSurvey.Shared.Models
@implements IAsyncDisposable
@inject NavigationManager NavigationManager
@inject ISurveyService SurveyClient
@inject PersistentComponentState ApplicationState
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>
<MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/create-survey">Add new Survey</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary">Add new Live Poll</MudButton>

<p>RenderInfo.Name = @RendererInfo.Name;</p>
<p>RenderInfo.IsIneractive = @RendererInfo.IsInteractive;</p>

@if (_surveyModel is null)
{
    <p>Loading...</p>
}
else
{
    <MudDataGrid Items="@_surveyModel" Filterable="false" SortMode="@SortMode.None" Groupable="false">
        <Columns>
            <PropertyColumn Property="x => x.Title" />
            <PropertyColumn Property="x => x.Created" Format="g" />
            <PropertyColumn Property="x => x.GetType().Name" />
            <TemplateColumn>
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" @onclick="_ => CopySurveyLink(context.Item.Id)">Copy Link to Survey</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn>
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" @onclick="_ => NavigateToResults(context.Item.Id)">Results</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>

    </MudDataGrid>
}


@code {
    private SurveyBase[]? _surveyModel;
    private PersistingComponentStateSubscription persistingSubscription;
    private IJSObjectReference? module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "/pages/Home.razor.js");
        }
    }

    protected override async Task OnInitializedAsync()
    {

        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<SurveyBase[]>(nameof(_surveyModel), out var storedData))
        {
            await GetSurveys();
        }
        else
        {
            _surveyModel = storedData!;
        }

    }

    private async Task CopySurveyLink(Guid id)
    {
        var surveyLink = NavigationManager.ToAbsoluteUri($"take-survey/{id.ToString()}");

        if (module is not null)
        {
            await module.InvokeVoidAsync("CopyToClipboard", surveyLink.ToString());
        }
    }

    private async Task GetSurveys()
    {
        _surveyModel = await SurveyClient.GetSurveys().ToArrayAsync<SurveyBase>();
    }

    private void NavigateToResults(Guid surveyId)
    {
        NavigationManager.NavigateTo($"/results/{surveyId}");
    }

    private Task PersistData()
    {

        ApplicationState.PersistAsJson(nameof(_surveyModel), _surveyModel);

        return Task.CompletedTask;
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();

            }
            catch (JSDisconnectedException)
            {
                //Ignore disconneted
            }
        }
        persistingSubscription.Dispose();
    }
}