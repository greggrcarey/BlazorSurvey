@page "/results/{SurveyId:guid}"
@inject SurveyState SurveyState
@inject ISurveyService SurveyService
@inject NavigationManager NavigationManager

<h3>Survey Results</h3>

@if (SurveyState.SurveyResponseRollup is not null && SurveyState.SurveyResponseRollup.SurveyTitle is not null)
{
    <MudText Typo="Typo.h1">Results for @SurveyState.SurveyResponseRollup.SurveyTitle</MudText>
}

@if (SurveyState.SurveyResponseRollup is not null &&
     SurveyState.SurveyResponseRollup.Results is not null &&
     SurveyState.SurveyResponseRollup.Results.Count > 0)
{
    @foreach (var result in SurveyState.SurveyResponseRollup.Results)
    {
        var resultMetaData = ResultComponentMetaData[result.ResponseType];
        resultMetaData.Parameters.Add("ResultData", result);
        <DynamicComponent Type="resultMetaData.Type" Parameters="resultMetaData.Parameters" />
    }
}
else
{
    <MudText Typo="Typo.body1">No results to display for this survey.</MudText>
}

@code {
    [Parameter]
    public Guid SurveyId { get; set; }
    private string surveyTitle { get; set; } = string.Empty;

    private Dictionary<string, ComponentMetaData> ResultComponentMetaData => new()
        {
            ["dateResponse"] = new ComponentMetaData()
            {
                Type = typeof(DateResult),
                Name = "Date Result",
                Parameters = { }
            },
            ["textResponse"] = new ComponentMetaData()
            {
                Type = typeof(TextResult),
                Name = "Text Result",
                Parameters = { }
            }
        };

    protected override async Task OnParametersSetAsync()
    {
        var result = await SurveyService.GetSurveyResultsAsync(SurveyId);

        if (result is not null)
        {
            SurveyState.SetSurveyResults(result);
        }


    }
}
